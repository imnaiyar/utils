name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: npm install
      - name: Determine last release tag
        id: last_release
        run: |
          LAST_RELEASE=$(git describe --abbrev=0 --tags)
          echo "::set-output name=tag::$LAST_RELEASE"
      - name: Get merged PRs since last release
        id: get_prs
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            async function run() {
              try {
                const octokit = github.getOctokit(core.getInput('GITHUB_TOKEN'));

                const { data: lastRelease } = await octokit.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: core.getInput('last_release')
                });

                const { data: compare } = await octokit.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: lastRelease.tag_name,
                  head: 'main'
                });

                const prs = compare.commits.map(commit => commit.pull_request);
                core.setOutput('prs', JSON.stringify(prs));
              } catch (error) {
                core.setFailed(error.message);
              }
            }

            run();
          last_release: ${{ steps.last_release.outputs.tag }}
      - name: Generate release notes
        id: generate_notes
        uses: ./scripts/generate-release.js
        with:
          prs: ${{ steps.get_prs.outputs.prs }}
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.generate_notes.outputs.notes }}
          draft: false
          prerelease: false